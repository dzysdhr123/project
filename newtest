var util = require('util');

var bleno = require('../..');

var BlenoCharacteristic = bleno.Characteristic;
var exec = require('child_process').exec;
var cmds = ['100', '200', '300'];
var no = 0;


var EchoCharacteristic = function() {
  EchoCharacteristic.super_.call(this, {
    uuid: 'ec0e',
    properties: ['read', 'write', 'notify'],
    value: null
  });

  this._value = new Buffer(0);
  this._updateValueCallback = null;
};

util.inherits(EchoCharacteristic, BlenoCharacteristic);


function execCmd() {
    var json = 100;
    exec('python3.5 final.py '+ cmds[1], function (error, stdout, stderr) {
        if(error){
            console.error('error: ' + error);
            
        }
        
        json = JSON.parse(stdout);
        
        if(json == 1){
          
            console.log('Face Recognition: Yes!!'+json);
            }
            
            
      });
      return json;
}


EchoCharacteristic.prototype.onReadRequest = function(offset, callback) {
  console.log('EchoCharacteristic - onReadRequest: value = ' + this._value.toString(16));

  callback(this.RESULT_SUCCESS, this._value);
};

EchoCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {


var aaa = execCmd();
console.log('aaa value = ' + aaa);
 this._value = aaa;
 
  console.log('EchoCharacteristic - onWriteRequest: value = ' + this._value.toString(16));
  if(data == '0001'){
            execCmd();
            }
            
            
  if (this._updateValueCallback) {
    console.log('EchoCharacteristic - onWriteRequest: notifying');

    this._updateValueCallback(this._value);
  }

  callback(this.RESULT_SUCCESS);
};

EchoCharacteristic.prototype.onSubscribe = function(maxValueSize, updateValueCallback) {
  console.log('EchoCharacteristic - onSubscribe');
  
  this._updateValueCallback = updateValueCallback;
};

EchoCharacteristic.prototype.onUnsubscribe = function() {
  console.log('EchoCharacteristic - onUnsubscribe');

  this._updateValueCallback = null;
};

module.exports = EchoCharacteristic;
